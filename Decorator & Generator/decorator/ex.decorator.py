# Decorator ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°   #‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏ß‡∏ô‡∏î‡πâ‡∏ß‡∏¢#
from dataclasses import fields


def check_balance(min_balance):
    def decorator(func):
        def wrapper(account, amount, *args, **kwargs):
            if account['balance'] < min_balance:
                print("‚ùå ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
                return
            return func(account, amount, *args, **kwargs)
        return wrapper
    return decorator

@check_balance(min_balance=100)
def withdraw(account, amount):
    account['balance'] -= amount
    print(f"‚úÖ ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô {amount} ‡∏ö‡∏≤‡∏ó, ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {account['balance']} ‡∏ö‡∏≤‡∏ó")

# ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ
acc = {'balance': 80}
withdraw(acc, 50)

acc['balance'] = 500
withdraw(acc, 200)

print('----------------------------------------------------------')

#Decorator ‡∏ö‡∏ß‡∏Å Vat/Tax ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
def add_vat(rate=0.07):
    def decorator(func):
        def wrapper(price, *args, **kwargs):
            total = price * (1 + rate)
            print(f"‡∏£‡∏≤‡∏Ñ‡∏≤ {price} + VAT {rate*100}% = {total:.2f}")
            return func(total, *args, **kwargs)
        return wrapper
    return decorator

@add_vat(0.1)  # VAT 10%
def pay(amount):
    print(f"üí∞ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô {amount} ‡∏ö‡∏≤‡∏ó")

pay(1000)


print('----------------------------------------------------------')

#Decorator ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ "‡∏£‡∏±‡∏ö‡∏£‡∏π‡πâ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ"
def require_active_subscription(func):
    def wrapper(self, *args, **kwargs):
        if self.state != 'active':
            raise KeyError("Subscription ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà active")
        return func(self, *args, **kwargs)
    return wrapper

def log_monthly_recognition(func):
    def wrapper(self, *args, **kwargs):
        _logger.info(f"[Subscription Revenue] Sub: {self.name}, Month: {fields.Date.today().month}, By user: {self.env.user.name}") # type: ignore
        return func(self, *args, **kwargs)
    return wrapper

class SaleSubscription(models.Model): # type: ignore
    _inherit = 'sale.subscription'

    @require_active_subscription
    @log_monthly_recognition
    def action_recognize_monthly_revenue(self):
        """ ‡∏£‡∏±‡∏ö‡∏£‡∏π‡πâ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ """
        # Logic:
        # 1. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏ñ‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏π‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á journal entry
        # 3. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ revenue_recognized = True
        journal = self.env['account.journal'].search([('type','=','general')], limit=1)
        move = self.env['account.move'].create({
            'journal_id': journal.id,
            'move_type': 'entry',
            'ref': f'Revenue Recognition {self.name} {fields.Date.today()}',
            'line_ids': [
                (0, 0, {
                    'name': 'Revenue',
                    'account_id': self.product_id.categ_id.property_account_income_categ_id.id,
                    'debit': 0.0,
                    'credit': self.recurring_total,
                }),
                (0, 0, {
                    'name': 'Deferred Revenue',
                    'account_id': self.env.ref('account.data_account_type_deferred_revenue').id,
                    'debit': self.recurring_total,
                    'credit': 0.0,
                }),
            ],
        })
        move.post()
        self.revenue_recognized_months += 1
